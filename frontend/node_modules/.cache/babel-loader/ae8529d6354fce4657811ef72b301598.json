{"ast":null,"code":"import { useState, useCallback, useRef, useEffect } from 'react';\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const activeHttpRequest = useRef([]);\n  const sendRequest = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequest.current.push(httpAbortCtrl);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortCtrl.signal\n      });\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n      throw error;\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequest.current.forEach(abortCtrl => abortCtrl.abort());\n    };\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  };\n};","map":{"version":3,"sources":["C:/Users/Harry/Desktop/JS/my_projects/mern-app/frontend/src/shared/hooks/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequest","sendRequest","url","method","body","headers","httpAbortCtrl","AbortController","current","push","response","fetch","signal","responseData","json","ok","Error","message","clearError","forEach","abortCtrl","abort"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;AAEA,QAAMS,iBAAiB,GAAGP,MAAM,CAAC,EAAD,CAAhC;AAEA,QAAMQ,WAAW,GAAGT,WAAW,CAC7B,gBAAOU,GAAP,EAA0D;AAAA,QAA9CC,MAA8C,uEAArC,KAAqC;AAAA,QAA9BC,IAA8B,uEAAvB,IAAuB;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;AACxDR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMS,aAAa,GAAG,IAAIC,eAAJ,EAAtB;AACAP,IAAAA,iBAAiB,CAACQ,OAAlB,CAA0BC,IAA1B,CAA+BH,aAA/B;;AAEA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAM;AAChCC,QAAAA,MADgC;AAEhCC,QAAAA,IAFgC;AAGhCC,QAAAA,OAHgC;AAIhCO,QAAAA,MAAM,EAAEN,aAAa,CAACM;AAJU,OAAN,CAA5B;AAOA,YAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA3B;;AAEA,UAAI,CAACJ,QAAQ,CAACK,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AAEDpB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOgB,YAAP;AACD,KAhBD,CAgBE,OAAOf,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAACD,KAAK,CAACmB,OAAP,CAAR;AACApB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMC,KAAN;AACD;AACF,GA3B4B,EA4B7B,EA5B6B,CAA/B;;AA+BA,QAAMoB,UAAU,GAAG,MAAM;AACvBnB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAFD;;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACXM,MAAAA,iBAAiB,CAACQ,OAAlB,CAA0BW,OAA1B,CAAmCC,SAAD,IAAeA,SAAS,CAACC,KAAV,EAAjD;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO;AAAEzB,IAAAA,SAAF;AAAaE,IAAAA,KAAb;AAAoBG,IAAAA,WAApB;AAAiCiB,IAAAA;AAAjC,GAAP;AACD,CAhDM","sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\r\n\r\nexport const useHttpClient = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState();\r\n\r\n  const activeHttpRequest = useRef([]);\r\n\r\n  const sendRequest = useCallback(\r\n    async (url, method = 'GET', body = null, headers = {}) => {\r\n      setIsLoading(true);\r\n      const httpAbortCtrl = new AbortController();\r\n      activeHttpRequest.current.push(httpAbortCtrl);\r\n\r\n      try {\r\n        const response = await fetch(url, {\r\n          method,\r\n          body,\r\n          headers,\r\n          signal: httpAbortCtrl.signal,\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n          throw new Error(responseData.message);\r\n        }\r\n\r\n        setIsLoading(false);\r\n        return responseData;\r\n      } catch (error) {\r\n        setError(error.message);\r\n        setIsLoading(false);\r\n        throw error;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      activeHttpRequest.current.forEach((abortCtrl) => abortCtrl.abort());\r\n    };\r\n  }, []);\r\n\r\n  return { isLoading, error, sendRequest, clearError };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}